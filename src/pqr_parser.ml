(*
  operations on the pqr File Format as output by Open Babel 2.3.0

  Example from ace_ligdecs.uniq.1conf.pqr:
  ---
MODEL        1
COMPND    active_InChIKeyABBSOQIXYPZCKO-NHCYSSNCSA-N
AUTHOR    GENERATED BY OPEN BABEL 2.3.0
ATOM      1  C1  <0> A   1       8.389   8.410  -2.139 -0.12470000   1.700  C
[...]
ATOM     37  H18 <0> A   1       7.082   2.606   0.932  0.03610000   1.100  H
CONECT    1    2    3   20
[...]
CONECT   37   19
MASTER        0    0    0    0    0    0    0    0   37    0   37    0
END
ENDMDL
MODEL        2
COMPND    active_InChIKeyYSFYVNRABGRTNY-UBHSHLNASA-N
[...]
  --- *)

open Batteries
open Printf

module A    = Array
module At   = Atom
module Dacc = Lacc.Dacc
module F    = Filename
module L    = List
module MU   = My_utils
module Mol  = Molecule
module S    = String

let mol_start_prfx  = "COMPND"
let atoms_start_tag = Str.regexp_string "AUTHOR"
let atoms_end_tag   = Str.regexp_string "CONECT"

let one_or_more_spaces = Str.regexp "[ ]+"

let extract_name l =
  match Str.split one_or_more_spaces l with
    | [_compnd ; molecule_name] -> molecule_name
    | _ -> failwith ("extract_name: could not parse: " ^ l)

(* will throw End_of_file once there is no more to read *)
let read_one_molecule counter input =
  let res = Dacc.create () in
  (* skip lines until we start to read a new molecule *)
  let line_ref = ref "" in
  while not (S.starts_with !line_ref mol_start_prfx) do
    line_ref := Legacy.input_line input
  done;
  (* this is the line with the molecule name *)
  let molecule_name = extract_name !line_ref in
  (* skip lines until we start to read atoms *)
  while not (Str.string_match atoms_start_tag (Legacy.input_line input) 0)
  do () done;
  let rec read_atoms acc =
    let line = Legacy.input_line input in
    if not (Str.string_match atoms_end_tag line 0) then
      let atom = At.of_pqr_line line in
      read_atoms (Dacc.accum acc atom)
    else
      ()
  in
  read_atoms res;
  let i = !counter in
  incr counter;
  Mol.create molecule_name i (Dacc.return res)

(* read all molecules from fn
   returns: [(name, [atoms]); ...] *)
let read_molecules fn =
  if not (F.check_suffix fn ".pqr")
  then Log.warn "%s not a .pqr file" fn;
  let nb_molecules = ref 0 in
  let molecules, _eof =
    MU.with_in_file fn (fun input ->
      MU.unfold_exc (fun () ->
        read_one_molecule nb_molecules input
      )
    )
  in
  Log.info "%d molecule(s) in %s" !nb_molecules fn;
  molecules
